module detect(z, x, clk, rst);
  
  output reg z;
  input x, clk, rst;
  
  reg [2:0] nxt_state, cur_state;
  
  parameter s0 = 3'b000,
  			s1 = 3'b001,
  			s2 = 3'b010,
  			s3 = 3'b011,
  			s4 = 3'b100;
  
  //assign z = nxt_state ==  ? 1 : 0;
  
  always @(posedge clk) begin
    if(rst) begin
      cur_state <= s0;
      nxt_state <= s0;
    end
  	else begin
      cur_state <= nxt_state;
    end
  end
  
  always @(x or cur_state)
    case(cur_state)
      s0 : if(x) 
		nxt_state = s1;
      else
        nxt_state = s0;
      
      s1 : if(x)
        nxt_state = s1;
      else
        nxt_state = s2;
      
      s2 : if(x)
        nxt_state = s3;
      else
        nxt_state = s0;
      
      s3 : if(x)
        nxt_state = s4;
      else
        nxt_state = s2;
      
      s4: if(x)
        nxt_state = s1;
      else
        nxt_state = s2;
    endcase
 
  
  always @(x or cur_state)
    case(cur_state)
      s4 : if(x)
        z = 1;
      else
        z = 1;
      
      s0,s1,s2,s3 : z = 0;
    endcase
 /*
    if(cur_state == s4 && x == 0)
      z = 1;
    else
      z = 0;
  */
  
endmodule
  
  
  
  module seqtb;
reg sin,clk,reset;
wire y;
  detect d1(y,sin,clk,reset);
initial
begin
clk = 1'b0;
repeat (21)
#5 clk = ~clk;
end
initial
begin
$monitor($time,"sin=%b,clk=%b,reset=%b,y=%b",sin,clk,reset,y);
reset = 1;sin=0;
#10 reset =0;
#10 sin = 1;
#10 sin = 0;
#10 sin = 1;
#10 sin = 1;
#10 sin = 0;
#10 sin = 0;
#10 sin = 1;
#10 sin = 1;
#10 sin = 0;
#10 sin = 1;
end
initial
begin
   $dumpfile ("seqtb.vcd");
   $dumpvars (0,seqtb);
end
endmodule
 
